services:
  # GraphRAG API Service
  graphrag-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graphrag-api
    env_file:
      - .env
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-graphrag123}
      - REDIS_URL=redis://redis:6379
      - VALID_API_KEYS=${API_KEYS:-dev-key-12345}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - API_KEYS=${API_KEYS}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # PostgreSQL Database Environment Variables
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-graphrag123}@postgres:5432/graphrag_chat
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=graphrag_chat
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-graphrag123}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./chroma_db_pipeline:/app/chroma_db_pipeline
      - ./ocr_outputs:/app/ocr_outputs
      - ./graphrag_cache:/app/graphrag_cache
      - ./config.toml:/app/config.toml:ro
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - graphrag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # GraphRAG Streamlit UI Service
  graphrag-ui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graphrag-ui
    env_file:
      - .env
    ports:
      - "8501:8501"
    environment:
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-graphrag123}
      - STREAMLIT_LOGGER_LEVEL=debug
      - PYTHONUNBUFFERED=1
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - API_KEYS=${API_KEYS}
      # PostgreSQL Database Environment Variables
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-graphrag123}@postgres:5432/graphrag_chat
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=graphrag_chat
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD:-graphrag123}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./chroma_db_pipeline:/app/chroma_db_pipeline
      - ./ocr_outputs:/app/ocr_outputs
      - ./graphrag_cache:/app/graphrag_cache
      - ./config.toml:/app/config.toml:ro
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      graphrag-api:
        condition: service_healthy
    # FIXED: Install missing dependencies before starting Streamlit
    command: >
      sh -c "
        echo 'ðŸ”„ Installing required dependencies...' &&
        pip install --no-cache-dir spacy llama-index-graph-stores-neo4j llama-index-embeddings-huggingface llama-index-vector-stores-chroma &&
        python -m spacy download en_core_web_sm &&
        echo 'âœ… All dependencies installed successfully!' &&
        echo 'ðŸš€ Starting Streamlit application...' &&
        streamlit run GraphRAG_Document_AI_Platform.py --server.port=8501 --server.address=0.0.0.0 --server.headless=true --server.enableWebsocketCompression=false
      "
    restart: unless-stopped
    networks:
      - graphrag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s  # Increased to allow time for dependency installation

  # PostgreSQL Database for Chat System
  postgres:
    image: postgres:15-alpine
    container_name: graphrag-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: graphrag_chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-graphrag123}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - graphrag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d graphrag_chat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Optional: pgAdmin for PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: graphrag-pgadmin
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@graphrag.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - graphrag-network
    profiles:
      - management  # Optional service - enable with: docker-compose --profile management up

  # Neo4j Database
  neo4j:
    image: neo4j:5.15-community
    container_name: graphrag-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-graphrag123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    networks:
      - graphrag-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-graphrag123}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: graphrag-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - graphrag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  # Neo4j volumes
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  # Redis volume
  redis_data:
    driver: local
  # PostgreSQL volumes
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  graphrag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16